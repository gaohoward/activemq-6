diff --git a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java
index 1fbf604..3cd1ea2 100755
--- a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java
+++ b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java
@@ -66,6 +66,7 @@ public class ActiveMQConnectionFactory extends JNDIBaseStorable implements Conne
     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactory.class);
     private static final String DEFAULT_BROKER_HOST;
     private static final int DEFAULT_BROKER_PORT;
+    private static URI defaultTcpUri;
     static{
         String host = null;
         String port = null;
@@ -116,6 +117,13 @@ public class ActiveMQConnectionFactory extends JNDIBaseStorable implements Conne
         }
         bindURL = (bindURL == null || bindURL.isEmpty()) ? defaultURL : bindURL;
         DEFAULT_BROKER_BIND_URL = bindURL;
+
+        try {
+            defaultTcpUri = new URI(defaultURL);
+        } catch (URISyntaxException e) {
+            LOG.debug("Failed to build default tcp url",e);
+        }
+
     }
 
     public static final String DEFAULT_BROKER_URL = "failover://"+DEFAULT_BROKER_BIND_URL;
@@ -231,7 +239,12 @@ public class ActiveMQConnectionFactory extends JNDIBaseStorable implements Conne
      */
     private static URI createURI(String brokerURL) {
         try {
-            return new URI(brokerURL);
+            URI uri = new URI(brokerURL);
+            String scheme = uri.getScheme();
+            if ("vm".equals(scheme)) {
+                return defaultTcpUri;
+            }
+            return uri;
         } catch (URISyntaxException e) {
             throw (IllegalArgumentException)new IllegalArgumentException("Invalid broker URI: " + brokerURL).initCause(e);
         }
diff --git a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQSession.java b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQSession.java
index 1d2ae83..085c825 100755
--- a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQSession.java
+++ b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/ActiveMQSession.java
@@ -56,6 +56,7 @@ import javax.jms.TopicSession;
 import javax.jms.TopicSubscriber;
 import javax.jms.TransactionRolledBackException;
 
+import org.apache.activemq.artemiswrapper.ArtemisBrokerHelper;
 import org.apache.activemq.blob.BlobDownloader;
 import org.apache.activemq.blob.BlobTransferPolicy;
 import org.apache.activemq.blob.BlobUploader;
@@ -1046,6 +1047,7 @@ public class ActiveMQSession implements Session, QueueSession, TopicSession, Sta
             return customDestination.createProducer(this);
         }
         int timeSendOut = connection.getSendTimeout();
+        this.preCreateDestination(ActiveMQMessageTransformation.transformDestination(destination));
         return new ActiveMQMessageProducer(this, getNextProducerId(), ActiveMQMessageTransformation.transformDestination(destination),timeSendOut);
     }
 
@@ -1237,10 +1239,21 @@ public class ActiveMQSession implements Session, QueueSession, TopicSession, Sta
             prefetch = prefetchPolicy.getQueuePrefetch();
         }
         ActiveMQDestination activemqDestination = ActiveMQMessageTransformation.transformDestination(destination);
-        return new ActiveMQMessageConsumer(this, getNextConsumerId(), activemqDestination, null, messageSelector,
+        //pre-create
+        preCreateDestination(activemqDestination);
+
+       return new ActiveMQMessageConsumer(this, getNextConsumerId(), activemqDestination, null, messageSelector,
                 prefetch, prefetchPolicy.getMaximumPendingMessageLimit(), noLocal, false, isAsyncDispatch(), messageListener);
     }
 
+    private void preCreateDestination(ActiveMQDestination activemqDestination) {
+       try {
+           ArtemisBrokerHelper.makeSureDestinationExists(activemqDestination);
+       } catch (Exception e) {
+           throw new RuntimeException("Failed to create queue" + activemqDestination, e);
+       }
+   }
+
     /**
      * Creates a queue identity given a <CODE>Queue</CODE> name.
      * <P>
@@ -1522,6 +1535,7 @@ public class ActiveMQSession implements Session, QueueSession, TopicSession, Sta
         }
 
         ActiveMQPrefetchPolicy prefetchPolicy = this.connection.getPrefetchPolicy();
+        this.preCreateDestination(ActiveMQMessageTransformation.transformDestination(queue));
         return new ActiveMQQueueReceiver(this, getNextConsumerId(), ActiveMQMessageTransformation.transformDestination(queue), messageSelector, prefetchPolicy.getQueuePrefetch(),
                                          prefetchPolicy.getMaximumPendingMessageLimit(), asyncDispatch);
     }
@@ -1545,6 +1559,7 @@ public class ActiveMQSession implements Session, QueueSession, TopicSession, Sta
             return customDestination.createSender(this);
         }
         int timeSendOut = connection.getSendTimeout();
+        this.preCreateDestination(ActiveMQMessageTransformation.transformDestination(queue));
         return new ActiveMQQueueSender(this, ActiveMQMessageTransformation.transformDestination(queue),timeSendOut);
     }
 
diff --git a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java
index 3eda490..44563c2 100644
--- a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java
+++ b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/BrokerService.java
@@ -57,6 +57,7 @@ import org.apache.activemq.ActiveMQConnectionMetaData;
 import org.apache.activemq.ConfigurationException;
 import org.apache.activemq.Service;
 import org.apache.activemq.advisory.AdvisoryBroker;
+import org.apache.activemq.broker.artemiswrapper.ArtemisBrokerWrapper;
 import org.apache.activemq.broker.cluster.ConnectionSplitBroker;
 import org.apache.activemq.broker.jmx.AnnotatedMBean;
 import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
@@ -141,6 +142,14 @@ public class BrokerService implements Service {
     public static final int DEFAULT_MAX_FILE_LENGTH = 1024 * 1024 * 32;
     public static final long DEFAULT_START_TIMEOUT = 600000L;
 
+    public String SERVER_SIDE_KEYSTORE;
+    public String KEYSTORE_PASSWORD;
+    public String SERVER_SIDE_TRUSTSTORE;
+    public String TRUSTSTORE_PASSWORD;
+    public String storeType;
+
+    public Set<Integer> extraConnectors = new HashSet<Integer>();
+
     private static final Logger LOG = LoggerFactory.getLogger(BrokerService.class);
 
     @SuppressWarnings("unused")
@@ -315,6 +324,7 @@ public class BrokerService implements Service {
      * @throws Exception
      */
     public TransportConnector addConnector(URI bindAddress) throws Exception {
+        extraConnectors.add(bindAddress.getPort());
         return addConnector(createTransportConnector(bindAddress));
     }
 
@@ -335,7 +345,7 @@ public class BrokerService implements Service {
      * @throws Exception
      */
     public TransportConnector addConnector(TransportConnector connector) throws Exception {
-        transportConnectors.add(connector);
+        //transportConnectors.add(connector);
         return connector;
     }
 
@@ -602,7 +612,7 @@ public class BrokerService implements Service {
             if (brokerRegistry.lookup(getBrokerName()) == null) {
                 brokerRegistry.bind(getBrokerName(), BrokerService.this);
             }
-            startPersistenceAdapter(startAsync);
+            //startPersistenceAdapter(startAsync);
             startBroker(startAsync);
             brokerRegistry.bind(getBrokerName(), BrokerService.this);
         } catch (Exception e) {
@@ -687,7 +697,7 @@ public class BrokerService implements Service {
         if (startException != null) {
             return;
         }
-        startDestinations();
+        //startDestinations();
         addShutdownHook();
 
         broker = getBroker();
@@ -695,8 +705,15 @@ public class BrokerService implements Service {
 
         // need to log this after creating the broker so we have its id and name
         LOG.info("Apache ActiveMQ {} ({}, {}) is starting", new Object[]{ getBrokerVersion(), getBrokerName(), brokerId });
-        broker.start();
-
+        //broker.start();
+        try {
+               broker.start();
+        } catch (Exception e) {
+            throw e;
+        } catch (Throwable t) {
+            throw new Exception(t);
+        }
+/*
         if (isUseJmx()) {
             if (getManagementContext().isCreateConnector() && !getManagementContext().isConnectorStarted()) {
                 // try to restart management context
@@ -708,7 +725,7 @@ public class BrokerService implements Service {
             managedBroker.setContextBroker(broker);
             adminView.setBroker(managedBroker);
         }
-
+*/
         if (ioExceptionHandler == null) {
             setIoExceptionHandler(new DefaultIOExceptionHandler());
         }
@@ -719,7 +736,7 @@ public class BrokerService implements Service {
             AnnotatedMBean.registerMBean(getManagementContext(), log4jConfigView, objectName);
         }
 
-        startAllConnectors();
+       // startAllConnectors();
 
         LOG.info("Apache ActiveMQ {} ({}, {}) started", new Object[]{ getBrokerVersion(), getBrokerName(), brokerId});
         LOG.info("For help or more information please see: http://activemq.apache.org");
@@ -2193,10 +2210,9 @@ public class BrokerService implements Service {
      * @throws
      */
     protected Broker createBroker() throws Exception {
-        regionBroker = createRegionBroker();
-        Broker broker = addInterceptors(regionBroker);
+        regionBroker = createBrokerWrapper();
         // Add a filter that will stop access to the broker once stopped
-        broker = new MutableBrokerFilter(broker) {
+        broker = new MutableBrokerFilter(regionBroker) {
             Broker old;
 
             @Override
@@ -2215,12 +2231,21 @@ public class BrokerService implements Service {
                 if (forceStart && old != null) {
                     this.next.set(old);
                 }
-                getNext().start();
+                try {
+                    getNext().start();
+                } catch (Exception e) {
+                    throw e;
+                } catch (Throwable t) {
+                }
             }
         };
         return broker;
     }
 
+    private Broker createBrokerWrapper() {
+        return new ArtemisBrokerWrapper(this);
+    }
+
     /**
      * Factory method to create the core region broker onto which interceptors
      * are added
@@ -2365,8 +2390,7 @@ public class BrokerService implements Service {
     }
 
     protected TransportConnector createTransportConnector(URI brokerURI) throws Exception {
-        TransportServer transport = TransportFactorySupport.bind(this, brokerURI);
-        return new TransportConnector(transport);
+        return null;
     }
 
     /**
@@ -3043,4 +3067,22 @@ public class BrokerService implements Service {
     public void setRejectDurableConsumers(boolean rejectDurableConsumers) {
         this.rejectDurableConsumers = rejectDurableConsumers;
     }
+
+    public void makeSureDestinationExists(ActiveMQDestination activemqDestination) throws Exception {
+        System.out.println(">>>> making sure dest exits: " + activemqDestination);
+        ArtemisBrokerWrapper hqBroker = (ArtemisBrokerWrapper)this.regionBroker;
+        //it can be null
+        if (activemqDestination == null) {
+           return;
+        }
+        if (activemqDestination.isQueue()) {
+            String qname = activemqDestination.getPhysicalName();
+            System.out.println("physical name: " + qname);
+            hqBroker.makeSureQueueExists(qname);
+        }
+    }
+
+    public boolean enableSsl() {
+        return this.SERVER_SIDE_KEYSTORE != null;
+    }
 }
diff --git a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/SslBrokerService.java b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/SslBrokerService.java
index 8cc944d..f76cace 100644
--- a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/SslBrokerService.java
+++ b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/SslBrokerService.java
@@ -104,4 +104,11 @@ public class SslBrokerService extends BrokerService {
             return TransportFactorySupport.bind(this, brokerURI);
         }
     }
+
+    //one way
+    public void setupSsl(String keystoreType, String password, String serverKeystore) {
+        this.SERVER_SIDE_KEYSTORE = serverKeystore;
+        this.KEYSTORE_PASSWORD = password;
+        this.storeType = keystoreType;
+    }
 }

@@ -0,0 +1,95 @@
diff --git a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java
index 9dc50f9..2ced916 100755
--- a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java
+++ b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java
@@ -27,6 +27,7 @@ import javax.net.ServerSocketFactory;
 import javax.net.SocketFactory;
 
 import org.apache.activemq.TransportLoggerSupport;
+import org.apache.activemq.artemiswrapper.ArtemisBrokerHelper;
 import org.apache.activemq.openwire.OpenWireFormat;
 import org.apache.activemq.transport.*;
 import org.apache.activemq.util.IOExceptionSupport;
@@ -42,6 +43,22 @@ import org.slf4j.LoggerFactory;
  */
 public class TcpTransportFactory extends TransportFactory {
     private static final Logger LOG = LoggerFactory.getLogger(TcpTransportFactory.class);
+    private static volatile String brokerService = null;
+
+    //if a broker is started or stopped it should set this.
+    public static void setBrokerName(String name) {
+        brokerService = name;
+    }
+
+    @Override
+    public Transport doConnect(URI location) throws Exception {
+        //here check broker, if no broker, we start one
+        if (brokerService == null) {
+            ArtemisBrokerHelper.startHornetQBroker(location);
+            brokerService = location.toString();
+        }
+        return super.doConnect(location);
+    }
 
     public TransportServer doBind(final URI location) throws IOException {
         try {
diff --git a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/ActiveMQSslConnectionFactoryTest.java b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/ActiveMQSslConnectionFactoryTest.java
index cbf4af3..5d1ec80 100644
--- a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/ActiveMQSslConnectionFactoryTest.java
+++ b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/ActiveMQSslConnectionFactoryTest.java
@@ -201,9 +201,8 @@ public class ActiveMQSslConnectionFactoryTest extends CombinationTestSupport {
         SslBrokerService service = new SslBrokerService();
         service.setPersistent(false);
 
-        KeyManager[] km = getKeyManager();
-        TrustManager[] tm = getTrustManager();
-        service.addSslConnector(uri, km, tm, null);
+        service.setupSsl(KEYSTORE_TYPE, PASSWORD, SERVER_KEYSTORE);
+
         service.start();
 
         return service;
diff --git a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/broker/region/group/MessageGroupTest.java b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/broker/region/group/MessageGroupTest.java
index 3437ba8..86741c9 100644
--- a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/broker/region/group/MessageGroupTest.java
+++ b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/broker/region/group/MessageGroupTest.java
@@ -168,7 +168,7 @@ public class MessageGroupTest extends JmsTestSupport {
         
         //assert that there are no messages for the consumer 1
         m = consumer1.receive(100);
-        assertNull("consumer 1 has some messages left", m);
+        assertNull("consumer 1 has some messages left: " + m, m);
 
         // The messages should now go to the second consumer.
         for (int i = 0; i < 4; i++) {
diff --git a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java
index 310fc1b..931beed 100755
--- a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java
+++ b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java
@@ -128,6 +128,7 @@ public abstract class JmsSendReceiveTestSupport extends org.apache.activemq.Test
     }
 
     protected void sendMessage(int index, Message message) throws Exception {
+      System.out.println("----sending a message to dest: " + producerDestination);
     	producer.send(producerDestination, message);
     }
 
diff --git a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java
index feff243..84cedea 100755
--- a/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java
+++ b/tests/activemq5-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java
@@ -113,6 +113,7 @@ public class JmsTopicSendReceiveTest extends JmsSendReceiveTestSupport {
             LOG.info("Creating durable consumer");
             return consumeSession.createDurableSubscriber((Topic)consumerDestination, getName());
         }
+        System.out.println(">>>>>>>creating cons on " + consumerDestination);
         return consumeSession.createConsumer(consumerDestination);
     }
 }
